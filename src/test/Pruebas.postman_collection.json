{
	"info": {
		"_postman_id": "55368d14-f5bc-4de4-b288-b5917de77bde",
		"name": "Pruebas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18050078"
	},
	"item": [
		{
			"name": "Acceso a zona privada con token mal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "token mal",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {}",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/usuario/grupos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"usuario",
						"grupos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro inicial",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene usuario\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.email).not.to.eql(undefined);\r",
							"    pm.expect(response.role).eql(\"usuario\");\r",
							"});\r",
							"//redefinir el token de acceso\r",
							"pm.globals.set(\"usuariosecundario\", response.email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test1@test.com\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/registrar",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"registrar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login correcto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene token\", ()=>{\r",
							"    pm.expect(response.accessToken).not.to.eql(undefined);\r",
							"});\r",
							"\r",
							"//redefinir el token de acceso\r",
							"pm.globals.set(\"token\", response.accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test1@test.com\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login incorrecto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"noexisto@test.com\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro correcto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene usuario\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.email).not.to.eql(undefined);\r",
							"    pm.expect(response.role).eql(\"usuario\");\r",
							"});\r",
							"//redefinir el token de acceso\r",
							"pm.globals.set(\"usuariosecundario\", response.email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/registrar",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"registrar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login correcto secundario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene token\", ()=>{\r",
							"    pm.expect(response.accessToken).not.to.eql(undefined);\r",
							"});\r",
							"\r",
							"//redefinir el token de acceso\r",
							"pm.globals.set(\"tokensecundario\", response.accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{usuariosecundario}}\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro usuario existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const body = pm.response.stream.toString('utf-8');\r",
							"\r",
							"pm.test(\"Mensaje de email duplicado\", ()=>{\r",
							"    pm.expect(body).eql(\"El email: test1@test.com ya estÃ¡ ocupado\");\r",
							"});\r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test1@test.com\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/registrar",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"registrar"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO crear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene grupo\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(1);\r",
							"    pm.expect(response.usuarios[0].email).to.eql(\"test1@test.com\");\r",
							"});\r",
							"\r",
							"//redefinir el uuid de grupo\r",
							"pm.globals.set(\"uuidgrupo\", response.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Grupo {{$randomProductName}}\",\r\n    \"descripcion\": \"{{$randomJobDescriptor}}\",\r\n    \"version\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar usuario a grupo que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/{{usuariosecundario}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"{{usuariosecundario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar usuario a grupo bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Usuario agregado a grupo\", ()=>{\r",
							"    let encontrado=false;\r",
							"    for(usu in response.usuarios){\r",
							"        if (usu.email===pm.globals.usuariosecundario)\r",
							"            encontrado=true;\r",
							"    }\r",
							"    pm.expect(encontrado).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/{{usuariosecundario}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"{{usuariosecundario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar usuario que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/{{$randomEmail}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"{{$randomEmail}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sacar usuario de grupo bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/{{usuariosecundario}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"{{usuariosecundario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Intentar dejar el grupo sin usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/test1@test.com",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"test1@test.com"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sacar usuario de grupo que no le pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/grupo/{{uuidgrupo}}/{{usuariosecundario}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo",
						"{{uuidgrupo}}",
						"{{usuariosecundario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Crear repetido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"Grupo {{$randomProductName}}\",\r\n    \"descripcion\": \"{{$randomJobDescriptor}}\",\r\n    \"version\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Editar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene grupo\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(4);\r",
							"    pm.expect(response.usuarios[0].email).to.eql(\"test1@test.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 3\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Editar version mala",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene grupo\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(4);\r",
							"    pm.expect(response.usuarios[0].email).to.eql(\"test1@test.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Editar uno que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Editar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION crear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene cancion\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.duracion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(1);\r",
							"});\r",
							"\r",
							"//redefinir el uuid de grupo\r",
							"pm.globals.set(\"uuidcancion\", response.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Nueva Cancion\",\r\n    \"descripcion\": \"descripcion cancion\",\r\n    \"duracion\":1000,\r\n    \"version\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion/{{uuidgrupo}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion",
						"{{uuidgrupo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION Editar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene el grupo cambiado\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).to.eql(\"Cancion cambiada\");\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidcancion}}\",\r\n    \"nombre\": \"Cancion cambiada\",\r\n    \"descripcion\": \"descripcion cancion\",\r\n    \"duracion\":1000,\r\n    \"version\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION Editar version mala",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene el grupo original\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).to.eql(\"Cancion cambiada\");\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).not.to.eql(undefined);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidcancion}}\",\r\n    \"nombre\": \"Cancion cambiada\",\r\n    \"descripcion\": \"descripcion cancion\",\r\n    \"duracion\":1000,\r\n    \"version\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION Editar uno que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Cancion cambiada\",\r\n    \"descripcion\": \"descripcion cancion\",\r\n    \"duracion\":1000,\r\n    \"version\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION Editar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Cancion cambiada\",\r\n    \"descripcion\": \"descripcion cancion\",\r\n    \"duracion\":1000,\r\n    \"version\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA crear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene nota\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.texto).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(1);\r",
							"});\r",
							"\r",
							"//redefinir el uuid de grupo\r",
							"pm.globals.set(\"uuidnota\", response.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Primera nota\",\r\n    \"texto\": \"Texto inicial\",\r\n    \"version\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota/{{uuidcancion}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota",
						"{{uuidcancion}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA Editar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene la nota cambiada\", ()=>{\r",
							"    pm.expect(response.id).to.eql(pm.globals.get(\"uuidnota\"));\r",
							"    pm.expect(response.nombre).to.eql(\"Nota cambiada\");\r",
							"    pm.expect(response.texto).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Nota cambiada\",\r\n    \"texto\": \"texto cambiado\",\r\n    \"version\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA Editar version mala",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene el nota original\", ()=>{\r",
							"    pm.expect(response.id).to.eql(pm.globals.get(\"uuidnota\"));\r",
							"    pm.expect(response.nombre).to.eql(\"Nota cambiada\");\r",
							"    pm.expect(response.texto).not.to.eql(undefined);\r",
							"    pm.expect(response.version).not.to.eql(undefined);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Nota cambiada\",\r\n    \"texto\": \"texto cambiado\",\r\n    \"version\":10000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA Editar uno que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Nota cambiada\",\r\n    \"texto\": \"texto cambiado\",\r\n    \"version\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA Editar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Nota cambiada\",\r\n    \"texto\": \"texto cambiado\",\r\n    \"version\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO crear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene audio\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombreArchivo).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":0}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "archivo",
							"type": "file",
							"src": "/G:/temp/almacenamiento/micosa.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO crear duplicado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene audio\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombreArchivo).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":0}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "archivo",
							"type": "file",
							"src": "/G:/temp/almacenamiento/micosa.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO editar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene audio\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombreArchivo).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"nombreaudio\",response.nombreArchivo);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":1}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/G:/temp/almacenamiento/sample-3s.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO editar version mal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene audio\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombreArchivo).not.to.eql(undefined);\r",
							"    pm.expect(response.version).not.to.eql(undefined);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":5002}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/G:/temp/almacenamiento/sample-3s.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO editar uno que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{$randomUUID}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":5002}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/G:/temp/almacenamiento/sample-3s.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO editar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "datos",
							"value": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"micosa.mp3\",\"version\":5002}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/G:/temp/almacenamiento/sample-3s.mp3"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO descargar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Descargando archivo\",function(){\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/octet-stream\");\r",
							"});\r",
							"pm.test(\"Nombre correcto de archivo\",function(){\r",
							"   pm.response.to.have.header(\"Content-Disposition\");\r",
							"   pm.response.to.be.header(\"Content-Disposition\", \"attachment; filename=\"+pm.globals.get(\"nombreaudio\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/audio/{{uuidnota}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio",
						"{{uuidnota}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Descargar grupos de usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"console.log(response);\r",
							"pm.test(\"Tiene datos de los grupos\", ()=>{\r",
							"    pm.expect(response.length).to.greaterThan(0);\r",
							"    let encontrado=false\r",
							"     for (g in response){\r",
							"        grupo = response[g]\r",
							"         if (grupo.id == pm.globals.get(\"uuidgrupo\")){\r",
							"            pm.expect(grupo.id).to.eq(pm.globals.get(\"uuidgrupo\"));\r",
							"            for (c in grupo.canciones){\r",
							"                cancion = grupo.canciones[c];\r",
							"                if (cancion.id==pm.globals.get(\"uuidcancion\"))\r",
							"                    for (n in cancion.notas){\r",
							"                        nota= cancion.notas[n];\r",
							"                        if (nota.id==pm.globals.get(\"uuidnota\"))\r",
							"                            encontrado = nota.audio.id==pm.globals.get(\"uuidnota\") && nota.audio.nombreArchivo==pm.globals.get(\"nombreaudio\");\r",
							"                }\r",
							"                            \r",
							"            }\r",
							"        }\r",
							"    }\r",
							"     pm.expect(encontrado).to.eq(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/usuario/grupos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuario",
						"grupos"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO borrar version mal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"_\",\"version\":100000}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO borrar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"_\",\"version\":100000}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO borrar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"{{uuidnota}}\",\"nombreArchivo\":\"_\",\"version\":2}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUDIO borrar no existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"{{$randomUUID}}\",\"nombreArchivo\":\"_\",\"version\":1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/audio",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"audio"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA borrar version mal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene el nota original\", ()=>{\r",
							"    pm.expect(response.id).to.eql(pm.globals.get(\"uuidnota\"));\r",
							"    pm.expect(response.nombre).to.eql(\"Nota cambiada\");\r",
							"    pm.expect(response.texto).not.to.eql(undefined);\r",
							"    pm.expect(response.version).not.to.eql(undefined);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Segunda nota cambiada\",\r\n    \"texto\": \"Esta nota tiene muchas cosas puestas\",\r\n    \"version\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA borrar no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Segunda nota cambiada\",\r\n    \"texto\": \"Esta nota tiene muchas cosas puestas\",\r\n    \"version\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA borrar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidnota}}\",\r\n    \"nombre\": \"Segunda nota cambiada\",\r\n    \"texto\": \"Esta nota tiene muchas cosas puestas\",\r\n    \"version\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "NOTA borrar no existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"Segunda nota cambiada\",\r\n    \"texto\": \"Esta nota tiene muchas cosas puestas\",\r\n    \"version\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/nota",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"nota"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION borrar version mal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene grupo\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidcancion}}\",\r\n    \"nombre\": \"Cancion\",\r\n    \"descripcion\": \"descripcion de la cancion\",\r\n    \"duracion\": 5000,\r\n    \"version\": 5000,\r\n    \"borrado\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION borrar no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidcancion}}\",\r\n    \"nombre\": \"Cancion\",\r\n    \"descripcion\": \"descripcion de la cancion\",\r\n    \"duracion\": 5000,\r\n    \"version\": 5000,\r\n    \"borrado\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCION borrar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidcancion}}\",\r\n    \"nombre\": \"Cancion\",\r\n    \"descripcion\": \"descripcion de la cancion\",\r\n    \"duracion\": 5000,\r\n    \"version\": 2,\r\n    \"borrado\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cancion",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cancion"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Borrar version mala",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Tiene grupo\", ()=>{\r",
							"    pm.expect(response.id).not.to.eql(undefined);\r",
							"    pm.expect(response.nombre).not.to.eql(undefined);\r",
							"    pm.expect(response.descripcion).not.to.eql(undefined);\r",
							"    pm.expect(response.version).not.to.eql(undefined);\r",
							"    pm.expect(response.usuarios[0].email).to.eql(\"test1@test.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1000\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Borrar uno que no pertenece",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokensecundario}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Borrar bien",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{uuidgrupo}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 4\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GRUPO Borrar uno que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status es 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"nombre\": \"nombre grupo cambiado\",\r\n    \"descripcion\": \"descripcion grupo\",\r\n    \"version\": 1\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/grupo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"grupo"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}